{"version":3,"sources":["Day/Day.js","Progressbar/Progressbar.js","App/App.js","index.js"],"names":["Day","temp","description","type","iconID","day","className","toUpperCase","src","alt","Progressbar","time","limitTimer","useState","timer","setTimer","updateTimer","useEffect","timerP","setTimeout","clearTimeout","toString","substr","id","value","max","convertTime","dateToConvert","date","now","undefined","hours","Date","getHours","minutes","getMinutes","App","Location","Units","ApiKey","currentWeatherInfo","setCurrentWeatherInfo","forecastWeatherInfo","setForecastWeatherInfo","fetchDataCurrent","fetchDataForecast","fetch","then","res","json","data","parseInt","main","weather","icon","timeDetection","dt","timeCurrent","daySelected","list","filter","elem","index","map","getDay","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d9ffb77.chunk.js","sourcesContent":["export const Day = ({temp, type, description, iconID, day}) => {\r\n    return(\r\n        <div className='MainViewDay flexHorizontal'>\r\n            \r\n            <div className='DayDate'>{day.toUpperCase() || 'DAY'}</div>\r\n            {/* <div className='DayType'>Type: {type}</div> */}\r\n            <div className='DayTemp'>{`${temp}°` || 'Temperature'}</div>\r\n            <div className='DayIcon flexVertical alignEnd'>\r\n                <img className='DayIconSrc noGhost' src={`http://openweathermap.org/img/wn/${iconID}.png`} alt={description}></img>\r\n                <div className='DayDescription'>{description.toUpperCase() || 'description'}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from \"react\"\r\n\r\nexport const Progressbar = ({time}) => {\r\n\r\n    const ratio = 100 //smoothness\r\n    const refreshingTimer = 1000/ratio; //every second: 1000ms\r\n    const limitTimer = 60*ratio; //every second: 1000ms\r\n    \r\n\r\n    const [timer, setTimer] = useState(limitTimer);\r\n\r\n    const updateTimer = (time) =>{ //Will be better to avoid this call so many times and using a CSS animation but i don't know if it's allowed for the task\r\n        if(time <= 1){\r\n          return limitTimer\r\n        }else{\r\n          return time-1\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timerP = setTimeout(() => {\r\n        setTimer(updateTimer);\r\n        }, refreshingTimer);\r\n        return () => clearTimeout(timerP);\r\n    });\r\n\r\n    return(\r\n        <div>\r\n            <div className='HeaderBarTime'>Reloading in {(timer/ratio).toString().substr(0, 2)}</div>\r\n            <progress id=\"progress\" value={timer} max={limitTimer}></progress>\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from \"react\"\r\nimport { Day } from '../Day/Day'\r\nimport { Progressbar } from '../Progressbar/Progressbar'\r\nimport '../styles/style.css'\r\n\r\n//Useful functions (can be moved in a different component (not in the App since will be defined every time component is called))\r\nlet convertTime = (dateToConvert, now = undefined) =>{\r\n    let date;\r\n    if(now){\r\n      date = new Date();\r\n    }else{\r\n      date = new Date(dateToConvert);\r\n    }\r\n    let hours = date.getHours();\r\n    let minutes = \"0\" + date.getMinutes();\r\n    return hours + ':' + minutes.substr(-2)\r\n}\r\n\r\nlet convertDate = (dateToConvert) =>{\r\n    let date = new Date(dateToConvert*1000);\r\n    let days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    return days[date.getDay()];\r\n}\r\n\r\n//COMPONENT (can be splitted in different components but since the app is simple I just divided in three App, Day element and Progress bar)\r\nexport const App = () => {\r\n\r\n    const Location = 'London';\r\n    const Units = 'metric';\r\n    const ApiKey = '63c0bbd221caec3f8cc9a08404781c83'; //ICLOUD\r\n    const refreshingTimer = 1000; //every second: 1000ms\r\n  \r\n    const [currentWeatherInfo, setCurrentWeatherInfo] = useState();\r\n    const [forecastWeatherInfo, setForecastWeatherInfo] = useState();\r\n    const [timer, setTimer] = useState(60);\r\n\r\n    //ONE MINUTE TIMER\r\n    const updateTimer = (time) =>{\r\n        if(time <= 1){\r\n        fetchDataCurrent()\r\n        fetchDataForecast()\r\n        return 60\r\n        }else{\r\n        return time-1\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timerP = setTimeout(() => {\r\n          setTimer(updateTimer(timer));\r\n        }, refreshingTimer);\r\n        return () => clearTimeout(timerP);\r\n    });\r\n    \r\n    useEffect(() => {\r\n      fetchDataCurrent()\r\n      fetchDataForecast()\r\n    }, [])\r\n  \r\n    //Current weather\r\n    const fetchDataCurrent = () => {\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${Location}&units=${Units}&appid=${ApiKey}`)\r\n      .then(res => res.json())\r\n      // .then(data => console.log(`data`, data))\r\n      .then(data => setCurrentWeatherInfo(()=>{\r\n        return {\r\n          temp: parseInt(data.main.temp),\r\n          type: data.weather[0].main,\r\n          description: data.weather[0].description,\r\n          iconID: data.weather[0].icon,\r\n          timeDetection: convertTime(data.dt*1000), //Not sure if the task need the time of detection of the Temperature \r\n          timeCurrent: convertTime(null, true) //or is a simple clock (used optional parameter to use tha same function and not create a new date inside the component)\r\n        }\r\n      }));\r\n    }\r\n\r\n    //Forecasts (5 days)\r\n    const fetchDataForecast = () => {\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${Location}&units=${Units}&appid=${ApiKey}`)\r\n        .then(res => res.json())\r\n        // .then(data => console.log(`forecast data`, data))\r\n        .then(data => {\r\n        let daySelected = data.list\r\n        .filter((elem, index)=>{\r\n            return index % 8 === 0\r\n        })\r\n        .map((elem)=>{\r\n            return {\r\n            temp: parseInt(elem.main.temp),\r\n            type: elem.weather[0].main,\r\n            description: elem.weather[0].description,\r\n            iconID: elem.weather[0].icon,\r\n            day: convertDate(elem.dt)\r\n            }\r\n        })\r\n        setForecastWeatherInfo(daySelected)\r\n        });\r\n    }\r\n     \r\n    return (\r\n        <div className='App flexVertical noselect'>\r\n          <div className='Header flexVertical'>\r\n            <div className='HeaderInfo flexHorizontal'>\r\n              <div className='HeaderInfoCity'>{Location.toUpperCase() || 'CITY'}</div>\r\n              <div className='HeaderInfoClock'>&bull;&bull;&bull;  {(currentWeatherInfo?.timeCurrent) ? `${currentWeatherInfo.timeCurrent} GMT` : `TIME GMT`}  &bull;&bull;&bull;</div>\r\n              <div className='HeaderInfoTemperature'>{currentWeatherInfo ? `${currentWeatherInfo.temp}°` : 'Temperature'}</div>\r\n            </div>\r\n            <div className='HeaderBar flexVertical justifyCenter'>\r\n              <div className='HeaderBarProgress'><Progressbar></Progressbar></div>\r\n            </div>\r\n          </div>\r\n          <div className='MainView flexVertical'>\r\n              {!!forecastWeatherInfo && forecastWeatherInfo.map((i, index)=>(\r\n                <div key={index}>\r\n                  <Day temp={i.temp} type={i.type} description={i.description} iconID={i.iconID} day={i.day}></Day>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <div className='Footer'>Created by Angelo Nastro</div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}